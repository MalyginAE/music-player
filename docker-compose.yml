version: '3.5'
services:
  db:
    image: postgres:12.16
    container_name: postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=demo
      - config.support_escapes=true
    networks:
      - odfe-net

  redis:
    image: redis
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"

    networks:
      - odfe-net
  #  hotels:
  #    build:
  #      context: ./
  #      dockerfile: Dockerfile
  #    depends_on:
  #      - "odfe-node"
  #    environment:
  #      - SPRING_DATASOURCE_URL=jdbc:postgresql://192.168.31.233:5433/postgres
  #    ports:
  #      - "8080:8080"
  elk:
    image: elasticsearch:7.17.15
    hostname: elastic
    container_name: elastic
    logging:
      driver: "json-file"
      options:
        max-size: "1000m"
        max-file: "10"
    environment:
      - discovery.type=single-node
      - node.name=odfe-node
      - discovery.seed_hosts=odfe-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - odfe-net


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  broker:
      image: confluentinc/cp-kafka:latest
      container_name: broker
      ports:
        - "9092:9092"
        - "9093:9093"
      depends_on:
        - zookeeper
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,PLAINTEXT_HOST://localhost:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  app:
    hostname: app
    container_name: app
    build:
      context: ./MusicPlayerDictionary
      dockerfile: Dockerfile
    depends_on:
      - "elk"
    environment:
      #      - необходимо прописать ipconfig и вставить сюда ip локальной сети, потому что localhost в контейнере свой
      - SPRING_ELASTICSEARCH_URIS=elastic:9200
      #      - выставил в true ,чтобы скрипты накатывались, можно потом подумать будет как их в образе накатить получше
    #      - SPRING_LIQUIBASE_ENABLED=true
    ports:
      - "8080:8080"
    networks:
      - odfe-net
networks:
  odfe-net:
    ipam:
      config:
        - subnet: 172.51.0.0/24


volumes:
  odfe-data:
  db:
  logstash: